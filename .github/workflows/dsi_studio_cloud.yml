name: DSI Studio Cloud
on: 
  workflow_dispatch:
    inputs:
      id:
        description: 'OpenNeuro Accession Number'
        default: ds001021
        required: true
      eddy:
        type: boolean
        default: 'true'
        description: 'Preprocessing: TOPUP/EDDY'
      acpc:
        type: boolean
        default: 'true'
        description: 'Preprocessing: Align AC-PC'
      region_analysis:
        type: boolean
        default: 'true'
        description: 'Pipeline: Region Analysis'
      connectivity_matrix:
        type: boolean
        default: 'true'
        description: 'Pipeline: Connectivity Matrix'
      autotrack:
        type: boolean
        default: 'true'
        description: 'Pipeline: Automatic Fiber Tracking'
      atlas:
        description: 'Options: Atlases'
        default: 'HCP-MMP,FreeSurferDKT_Cortical'
        required: false
      tract:
        description: 'Options: Tracts of Interest'
        default: 'ArcuateFasciculus,Forceps'
        required: false
      
jobs:    
  download_data:
    name: Download ${{ github.event.inputs.id }}
    runs-on: ubuntu-20.04
    outputs:
      files: ${{ steps.src.outputs.files }}
      dataset_description: ${{ steps.openneuro.outputs.dataset_description }}
    steps:
      - name: Download ${{ github.event.inputs.id }}
        id: openneuro
        run: |
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "*dwi.*" s3://openneuro.org/${{ github.event.inputs.id }} ${{ github.event.inputs.id }} 
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "dataset_description.json" s3://openneuro.org/${{ github.event.inputs.id }} .
          content=`cat dataset_description.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=dataset_description::$content"    
      - name: Create SRC Files
        id: src
        run: |
          curl -sL "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" | jar x && chmod 777 ./dsi-studio/dsi_studio
          ./dsi-studio/dsi_studio --action=src --source=${{ github.event.inputs.id }}
          mv ./**/*src.gz .
          FIB_LIST=$(ls *.src.gz | jq -R -s -c 'split("\n")[:-1]')
          echo ::set-output name=files::${FIB_LIST}    
      - name: Failed Report
        if: failure() 
        run: cat ./${{ github.event.inputs.id }}/log.txt      
      - name: Save SRC files
        if: github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_raw_src
          path: ./*src.gz
      - name: Save SRC files
        if: github.event.inputs.eddy == 'false' && github.event.inputs.acpc == 'false'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_src
          path: ./*.src.gz          
          
  quality_check1:
    name: Quality Check 1
    if: github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true'
    needs: download_data
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare Raw SRC
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_raw_src
      - name: Quality Check
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=qc --source=.    
          mv qc.txt qc1.txt
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: qc1.txt
          name: "${{ fromjson(needs.download_data.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}  
          
  preprocessing:
    name: Preprocessing
    continue-on-error: true
    needs: download_data
    outputs:
      dataset_description: ${{ needs.download_data.outputs.dataset_description }}    
    strategy:
      matrix:
        files: ${{ fromjson(needs.download_data.outputs.files) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare Raw SRC
        if: github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true'
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_raw_src
      - name: Download Raw SRC (Backup)
        if: failure() && (github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true')
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_src
      - name: Setup AC-PC command
        uses: haya14busa/action-cond@v1.0.0
        id: acpc_command
        with:
          cond: ${{ github.event.inputs.acpc == 'true' }}
          if_true: '1'
          if_false: '0'      
      - name: Cache FSL environment
        if: github.event.inputs.eddy == 'true'
        id: cache-fsl
        uses: actions/cache@v3
        with:
          path: /opt/fsl
          key: ${{ runner.os }}-fsl
      - name: Prepare FSL environment
        if: steps.cache-fsl.outputs.cache-hit != 'true' && github.event.inputs.eddy == 'true'
        run: curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos7_64.tar.gz | tar zxv --no-same-owner -C /opt --exclude='fsl/doc' --exclude='fsl/refdoc' --exclude='fsl/python/oxford_asl' --exclude='fsl/data/possum' --exclude='fsl/data/first' --exclude='fsl/data/mist' --exclude='fsl/data/atlases' --exclude='fsl/data/xtract_data' --exclude='fsl/extras/doc' --exclude='fsl/extras/man' --exclude='fsl/extras/src' --exclude='fsl/src'
      - name: Eddy and align ACPC
        if: github.event.inputs.eddy == 'true'
        run: |
          export OS="Linux"
          export FSLDIR="/opt/fsl"
          export FSL_DIR="$FSLDIR"
          export FSLOUTPUTTYPE="NIFTI_GZ"
          export FSLMULTIFILEQUIT="TRUE"
          export LD_LIBRARY_PATH="$FSLDIR/lib:$LD_LIBRARY_PATH"
          export FSLTCLSH="/usr/bin/tclsh"
          export FSLWISH="/usr/bin/wish"
          export PATH="$FSLDIR/bin:$PATH"
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }} --cmd="[Step T2][Corrections][TOPUP EDDY]" --save_src=${{ matrix.files }} --align_acpc=${{ steps.acpc_command.outputs.value }}              
      - name: align ACPC
        if: github.event.inputs.eddy == 'false' && github.event.inputs.acpc == 'true'
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }} --save_src=${{ matrix.files }} --align_acpc=1
      - name: Save SRC Files
        if: github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_src
          path: ${{ matrix.files }}

  quality_check2:
    name: Quality Check 2
    needs: preprocessing
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare SRC Files
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_src
      - name: Delete Raw SRC Files
        if: github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true'
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: ${{ github.event.inputs.id }}_raw_src
      - name: Quality Check
        run: |        
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=qc --source=.
          mv qc.txt qc2.txt
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: qc2.txt
          name: "${{ fromjson(needs.preprocessing.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}
          
  reconstruction:
    name: Reconstruction
    needs: preprocessing
    runs-on: ubuntu-20.04
    outputs:
      files: ${{ steps.fib.outputs.files }}
      dataset_description: ${{ needs.preprocessing.outputs.dataset_description }}
    steps:
      - name: Prepare SRC Files
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_src
      - name: Create FIB Files
        id: fib
        run: |        
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=rec --source=*.src.gz --mask=1 --check_btable=0 --align_acpc=0
          zip ${{ github.event.inputs.id }}_fib.zip *.fib.gz
          FIB_LIST=$(ls *.fib.gz | jq -R -s -c 'split("\n")[:-1]')
          echo ::set-output name=files::${FIB_LIST}
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}_fib.zip
          name: "${{ fromjson(needs.preprocessing.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}
          
  region_analysis:
    name: Region Analysis
    continue-on-error: true
    if: github.event.inputs.region_analysis == 'true'
    needs: reconstruction
    strategy:
      matrix:
        files: ${{ fromjson(needs.reconstruction.outputs.files) }}
    outputs:
      dataset_description: ${{ needs.reconstruction.outputs.dataset_description }}      
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare FIB file
        uses: robinraju/release-downloader@v1.3
        with:
          repository: "${{ github.repository }}"
          tag: "${{ github.event.inputs.id }}"
          fileName: "${{ github.event.inputs.id }}_fib.zip"
      - name: Analyzing Regions
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q \*.zip
          ./dsi-studio/dsi_studio --action=ana --source=${{ matrix.files }} --atlas=${{ github.event.inputs.atlas }}
      - name: Save Result
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_region_analysis
          path: ./*.txt 
          
  automatic_fiber_tracking:
    name: Automatic Fiber Tracking
    continue-on-error: true
    if: github.event.inputs.autotrack == 'true'
    needs: reconstruction
    strategy:
      matrix:
        files: ${{ fromjson(needs.reconstruction.outputs.files) }}
    outputs:
      dataset_description: ${{ needs.reconstruction.outputs.dataset_description }}            
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare FIB file
        uses: robinraju/release-downloader@v1.3
        with:
          repository: "${{ github.repository }}"
          tag: "${{ github.event.inputs.id }}"
          fileName: "${{ github.event.inputs.id }}_fib.zip"
      - name: AutoTrack
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q \*.zip
          ./dsi-studio/dsi_studio --action=atk --source=${{ matrix.files }} --track_id=${{ github.event.inputs.tract }}
          mv ./**/*.tt.gz .
          mv ./**/*.stat.txt .
      - name: Save Result
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_autotrack
          path: |
            ./*.tt.gz 
            ./*.stat.txt 
            
  connectivity_matrix:
    name: Connectivity Matrix
    continue-on-error: true
    if: github.event.inputs.connectivity_matrix == 'true'
    needs: reconstruction
    strategy:
      matrix:
        files: ${{ fromjson(needs.reconstruction.outputs.files) }}
    outputs:
      dataset_description: ${{ needs.reconstruction.outputs.dataset_description }}            
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare FIB file
        uses: robinraju/release-downloader@v1.3
        with:
          repository: "${{ github.repository }}"
          tag: "${{ github.event.inputs.id }}"
          fileName: "${{ github.event.inputs.id }}_fib.zip"
      - name: Tracking
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q \*.zip
          ./dsi-studio/dsi_studio --action=trk --source=${{ matrix.files }} --fiber_count=1000000 --output=no_file --connectivity=${{ github.event.inputs.atlas }}          
      - name: Save Result
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_connectivity_matrix
          path: |
            ./*.mat
            ./*.txt
    
  region_analysis_output:
    name: Save Region Analysis Results
    if: github.event.inputs.region_analysis == 'true'
    needs: region_analysis
    runs-on: ubuntu-20.04
    steps:
      - name: Collect results
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_region_analysis
      - name: Zip results
        run: zip ${{ github.event.inputs.id }}_region_analysis.zip *.txt
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}_region_analysis.zip
          name: "${{ fromjson(needs.region_analysis.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}
          
  automatic_fiber_tracking_output:
    name: Save AutoTrack Results
    if: github.event.inputs.autotrack == 'true'
    needs: automatic_fiber_tracking
    runs-on: ubuntu-20.04
    steps:
      - name: Collect results
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_autotrack
      - name: Zip results
        run: zip ${{ github.event.inputs.id }}_autotrack.zip *.tt.gz *.stat.txt
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}_autotrack.zip
          name: "${{ fromjson(needs.automatic_fiber_tracking.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}

  connectivity_matrix_output:
    name: Save Connectivity Matrix Results
    if: github.event.inputs.connectivity_matrix == 'true'
    needs: connectivity_matrix
    runs-on: ubuntu-20.04
    steps:
      - name: Collect results
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_connectivity_matrix
      - name: Zip results
        run: zip ${{ github.event.inputs.id }}_connectivity_matrix.zip *.mat *.txt
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}_connectivity_matrix.zip
          name: "${{ fromjson(needs.connectivity_matrix.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}
          
          
