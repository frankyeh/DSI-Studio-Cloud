name: DSI Studio Cloud
on: 
  workflow_dispatch:
    inputs:
      id:
        description: 'OpenNeuro Accession Number'
        default: ds001378
        required: true
      src_param:
        required: false
        default: ''
        description: 'Other Reconstruction Parameters'
      metrics:
        required: false
        default: qa,dti_fa
        description: 'Metrics for database'
jobs:    
  info:
    name: Download OpenNeuro
    runs-on: ubuntu-20.04
    outputs:
      subjects: ${{ steps.data.outputs.subjects }}
      files: ${{ steps.data.outputs.files }}
      dataset_name: ${{ steps.data.outputs.dataset_name }}
      metrics: ${{ steps.data.outputs.metrics }}
    steps:
      - name: OpenNeuro
        id: data
        run: |
          # Process dataset_description.json
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "dataset_description.json" s3://openneuro.org/${{ github.event.inputs.id }} .
          content=$(cat dataset_description.json)
          name=$(echo "$content" | jq -r '.Name')
          echo "dataset_name=$name" >> $GITHUB_OUTPUT

          # Get subjects
          SUBJECTS=$(aws s3 ls --no-sign-request --region eu-west-1 s3://openneuro.org/${{ github.event.inputs.id }} --recursive | grep '/dwi/' | awk '{print $NF}' | awk -F'/dwi/' '{print $1}' | awk -F'/sub-' '/sub-/ {print "sub-" $2}' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          FILES=$(echo "$SUBJECTS" | tr '/' '_')
          echo "subjects=$SUBJECTS" >> $GITHUB_OUTPUT
          echo "files=$FILES" >> $GITHUB_OUTPUT

          metrics="${{ github.event.inputs.metrics }}"
          metrics=$(echo "[\"${metrics//,/\",\"}\"]")
          echo "metrics=$metrics" >> $GITHUB_OUTPUT

          echo "OpenNeuro ${{ github.event.inputs.id }}" >> $GITHUB_STEP_SUMMARY
          
  download_data:
    name: NIFTI to SRC
    needs: info
    runs-on: ubuntu-20.04
    outputs:
      subjects: ${{ needs.info.outputs.subjects }}
      files: ${{ needs.info.outputs.files }}
      dataset_description: ${{ needs.info.outputs.dataset_description }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Call NII to SRC
        uses: ./.github/workflows/nii2src.yml@main
        with:
          subjects: ${{ needs.info.outputs.subjects }}
          dataset_id: ${{ github.event.inputs.id }} 
          
  src_quality_check1:
    name: Raw SRC Quality Check
    needs: download_data
    runs-on: ubuntu-20.04
    steps:     
      - name: Check Files
        run: |
          if curl --head --silent --fail https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/pre_topup_eddy_qc.txt; then
            echo "file_exists=true" >> $GITHUB_ENV
            wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/pre_topup_eddy_qc.txt
            cat pre_topup_eddy_qc.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "file_exists=false" >> $GITHUB_ENV
          fi
      - name: Quality Check
        if: env.file_exists == 'false'
        run: |        
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip  
          files=($(echo "${{ needs.download_data.outputs.files }}" | tr ',' ' ' | tr ']' ' ' | tr '[' ' '))
          for file in "${files[@]}"; do
            wget -q "https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${file}_dwi.raw.src.gz"
            ./dsi-studio/dsi_studio --action=qc --source=.
            if [ -f "pre_topup_eddy_qc.txt" ]; then
              sed -n '2p' qc.txt >> pre_topup_eddy_qc.txt
            else
              head -n 2 qc.txt > pre_topup_eddy_qc.txt
            fi
            rm *.raw.src.gz
          done
          cat pre_topup_eddy_qc.txt >> $GITHUB_STEP_SUMMARY

      - name: Create Release
        if: env.file_exists == 'false'
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: pre_topup_eddy_qc.txt 
          name: "${{ needs.download_data.outputs.dataset_name }}"
          tag: ${{ github.event.inputs.id }}   
          
  topup_eddy:
    name: TOPUP/EDDY
    needs: download_data
    outputs:
      files: ${{ needs.download_data.outputs.files }}
      dataset_description: ${{ needs.download_data.outputs.dataset_description }}   
    strategy:
      matrix:
        files: ${{ fromjson(needs.download_data.outputs.files) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check Files
        run: |
          if curl --head --silent --fail https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}_dwi.src.gz; then
            echo "file_exists=true" >> $GITHUB_ENV
          else
            echo "file_exists=false" >> $GITHUB_ENV
          fi
      - name: Cache FSL environment
        if: env.file_exists == 'false'
        id: cache-fsl
        uses: actions/cache@v3
        with:
          path: /opt/fsl
          key: ${{ runner.os }}-fsl
      - name: Prepare FSL environment
        if: steps.cache-fsl.outputs.cache-hit != 'true' && env.file_exists == 'false'
        run: curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos7_64.tar.gz | tar zxv --no-same-owner -C /opt --exclude='fsl/doc' --exclude='fsl/refdoc' --exclude='fsl/python/oxford_asl' --exclude='fsl/data/possum' --exclude='fsl/data/first' --exclude='fsl/data/mist' --exclude='fsl/data/atlases' --exclude='fsl/data/xtract_data' --exclude='fsl/extras/doc' --exclude='fsl/extras/man' --exclude='fsl/extras/src' --exclude='fsl/src'
      - name: Eddy
        if: env.file_exists == 'false'
        run: |
          export OS="Linux"
          export FSLDIR="/opt/fsl"
          export FSL_DIR="$FSLDIR"
          export FSLOUTPUTTYPE="NIFTI_GZ"
          export FSLMULTIFILEQUIT="TRUE"
          export LD_LIBRARY_PATH="$FSLDIR/lib:$LD_LIBRARY_PATH"
          export FSLTCLSH="/usr/bin/tclsh"
          export FSLWISH="/usr/bin/wish"
          export PATH="$FSLDIR/bin:$PATH"
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}_dwi.raw.src.gz
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }}_dwi.raw.src.gz --cmd="[Step T2][Corrections][EDDY]" --save_src=${{ matrix.files }}_dwi.src.gz ${{ github.event.inputs.src_param}}               
      - name: Create Release
        if: env.file_exists == 'false'
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ matrix.files }}_dwi.src.gz
          name: "${{ needs.download_data.outputs.dataset_name }}"
          tag: ${{ github.event.inputs.id }}  
      - name: Create Release
        if: failure()
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ matrix.files }}_dwi.src.gz
          name: "${{ needs.download_data.outputs.dataset_name }}"
          tag: ${{ github.event.inputs.id }}            
          
  src_quality_check2:
    name: Post TOPUP/EDDY SRC Quality Check
    needs: topup_eddy
    runs-on: ubuntu-20.04
    steps:       
      - name: Check Files
        run: |
          if curl --head --silent --fail https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/post_topup_eddy_qc.txt; then
            echo "file_exists=true" >> $GITHUB_ENV
            wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/post_topup_eddy_qc.txt
            cat post_topup_eddy_qc.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "file_exists=false" >> $GITHUB_ENV
          fi
      - name: Quality Check
        if: env.file_exists == 'false'
        run: |        
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip  
          files=($(echo "${{ needs.topup_eddy.outputs.files }}" | tr ',' ' ' | tr ']' ' ' | tr '[' ' '))
          for file in "${files[@]}"; do
            wget -q "https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${file}_dwi.src.gz"
            ./dsi-studio/dsi_studio --action=qc --source=.
            if [ -f "post_topup_eddy_qc.txt" ]; then
              sed -n '2p' qc.txt >> post_topup_eddy_qc.txt
            else
              head -n 2 qc.txt > post_topup_eddy_qc.txt
            fi
            rm *.src.gz
          done
          cat post_topup_eddy_qc.txt >> $GITHUB_STEP_SUMMARY
      - name: Create Release
        if: env.file_exists == 'false'
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: post_topup_eddy_qc.txt 
          name: "${{ needs.topup_eddy.outputs.dataset_name }}"
          tag: ${{ github.event.inputs.id }}           

  reconstruction:
    name: SRC to FIB
    needs: topup_eddy
    outputs:
      files: ${{ needs.topup_eddy.outputs.files }}
      dataset_description: ${{ needs.topup_eddy.outputs.dataset_description }}    
    strategy:
      matrix:
        files: ${{ fromjson(needs.topup_eddy.outputs.files) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check If Done
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}_dwi.gqi.fib.gz || true
          wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}_dwi.qsdr.fib.gz || true
          if [ ! -f "${{ matrix.files }}_dwi.qsdr.fib.gz" ]; then
            echo "file_exists=false" >> $GITHUB_ENV
          else
            echo "file_exists=true" >> $GITHUB_ENV
          fi
      - name: GQI and QSDR Reconstruction
        if: env.file_exists == 'false'
        run: |
          wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}_dwi.src.gz
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }}_dwi.src.gz --output=${{ matrix.files }}_dwi.gqi.fib.gz ${{ github.event.inputs.src_param}}  
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }}_dwi.src.gz --output=${{ matrix.files }}_dwi.qsdr.fib.gz --method=7  ${{ github.event.inputs.src_param}}
      - name: Create Release
        if: env.file_exists == 'false'
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: |
            ${{ matrix.files }}_dwi.gqi.fib.gz
            ${{ matrix.files }}_dwi.qsdr.fib.gz
          name: "${{ fromjson(needs.topup_eddy.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}    
      - name: Export Metrics
        if: ${{ github.event.inputs.metrics != '' }}
        run: ./dsi-studio/dsi_studio --action=exp --source=${{ matrix.files }}_dwi.qsdr.fib.gz --export=${{ github.event.inputs.metrics }}          
      - name: Save Metrics
        if: ${{ github.event.inputs.metrics != '' }}
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_metrics
          path: ./*.nii.gz
          
  database_construction:
    if: ${{ github.event.inputs.metrics != '' }}
    name: Create Database
    needs: [info, reconstruction]
    outputs:
      files: ${{ needs.metrics.outputs.files }}
      dataset_description: ${{ needs.metrics.outputs.dataset_description }}    
    strategy:
      matrix:
        metrics: ${{ fromJson(needs.info.outputs.metrics) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check If Done
        run: |
          wget -q https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ github.event.inputs.id }}.${{matrix.metrics}}.db.fib.gz || true
          if [ ! -f "${{ github.event.inputs.id }}.${{matrix.metrics}}.db.fib.gz" ]; then
            echo "file_exists=false" >> $GITHUB_ENV
          else
            echo "file_exists=true" >> $GITHUB_ENV
          fi
      - name: Prepare Metrics
        if: env.file_exists == 'false'
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_metrics
      - name: Database Construction
        if: env.file_exists == 'false'
        run: |        
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "participants.tsv" s3://openneuro.org/${{ github.event.inputs.id }} .
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          if [ -f participants.tsv ]; then
            ./dsi-studio/dsi_studio --action=atl --source=*.${{matrix.metrics}}.nii.gz --cmd=db --demo=participants.tsv --output=${{ github.event.inputs.id }}.${{matrix.metrics}}.db.fib.gz
          else
            ./dsi-studio/dsi_studio --action=atl --source=*.${{matrix.metrics}}.nii.gz --cmd=db --output=${{ github.event.inputs.id }}.${{matrix.metrics}}.db.fib.gz
          fi
      - name: Create Release
        if: env.file_exists == 'false'
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}.${{matrix.metrics}}.db.fib.gz
          name: "${{ needs.reconstruction.outputs.dataset_name }}"
          tag: ${{ github.event.inputs.id }}          
     
