name: DSI Studio Cloud
on: 
  workflow_dispatch:
    inputs:
      id:
        description: 'OpenNeuro Accession Number'
        default: ds001021
        required: true
      eddy:
        type: boolean
        default: 'false'
        description: 'Preprocessing: TOPUP/EDDY'
      acpc:
        type: boolean
        default: 'false'
        description: 'Preprocessing: Align AC-PC'
      
jobs:    
  download_data:
    name: "NIFTI to SRC"
    runs-on: ubuntu-20.04
    outputs:
      files: ${{ steps.src.outputs.files }}
      dataset_description: ${{ steps.openneuro.outputs.dataset_description }}
    steps:
      - name: Download OpenNeuro
        id: download_data
        run: |
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "*dwi.*" s3://openneuro.org/${{ github.event.inputs.id }} nifti 
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "dataset_description.json" s3://openneuro.org/${{ github.event.inputs.id }} .
          content=`cat dataset_description.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=dataset_description::$content"    
      - name: Create SRC Files
        id: src
        run: |
          curl -sL "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" | jar x && chmod 777 ./dsi-studio/dsi_studio
          ./dsi-studio/dsi_studio --action=src --source=./nifti
          mv ./**/*src.gz .
          SRC_LIST=$(ls *.src.gz | jq -R -s -c 'split("\n")[:-1]')
          echo ::set-output name=files::${SRC_LIST}    
      - name: Failed Report
        if: failure() 
        run: cat ./${{ github.event.inputs.id }}/log.txt      
      - name: Save SRC files
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_src
          path: ./*.src.gz          
                
  reconstruction:
    name: "SRC to FIB"
    continue-on-error: true
    needs: download_data
    outputs:
      dataset_description: ${{ needs.download_data.outputs.dataset_description }}    
    strategy:
      matrix:
        files: ${{ fromjson(needs.download_data.outputs.files) }}
    runs-on: ubuntu-20.04
    steps:
      - name: DSI Studio
        run: |
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
      - name: SRC Files
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_src     
      - name: Cache FSL environment
        if: github.event.inputs.eddy == 'true'
        id: cache-fsl
        uses: actions/cache@v3
        with:
          path: /opt/fsl
          key: ${{ runner.os }}-fsl
      - name: Prepare FSL environment
        if: steps.cache-fsl.outputs.cache-hit != 'true' && github.event.inputs.eddy == 'true'
        run: curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos7_64.tar.gz | tar zxv --no-same-owner -C /opt --exclude='fsl/doc' --exclude='fsl/refdoc' --exclude='fsl/python/oxford_asl' --exclude='fsl/data/possum' --exclude='fsl/data/first' --exclude='fsl/data/mist' --exclude='fsl/data/atlases' --exclude='fsl/data/xtract_data' --exclude='fsl/extras/doc' --exclude='fsl/extras/man' --exclude='fsl/extras/src' --exclude='fsl/src'
      - name: Eddy and align ACPC
        if: github.event.inputs.eddy == 'true'
        run: |
          export OS="Linux"
          export FSLDIR="/opt/fsl"
          export FSL_DIR="$FSLDIR"
          export FSLOUTPUTTYPE="NIFTI_GZ"
          export FSLMULTIFILEQUIT="TRUE"
          export LD_LIBRARY_PATH="$FSLDIR/lib:$LD_LIBRARY_PATH"
          export FSLTCLSH="/usr/bin/tclsh"
          export FSLWISH="/usr/bin/wish"
          export PATH="$FSLDIR/bin:$PATH"
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }} --cmd="[Step T2][Corrections][TOPUP EDDY]" --save_src=${{ matrix.files }} --align_acpc=${{ github.event.inputs.acpc }}              
      - name: align ACPC
        if: github.event.inputs.eddy == 'false' && github.event.inputs.acpc == 'true'
        run: |
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }} --save_src=${{ matrix.files }} --align_acpc=1
      - name: Save SRC Files
        if: github.event.inputs.eddy == 'true'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_corrected_src
          path: ${{ matrix.files }}
      - name: GQI Reconstruction
        run: |
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }}    
      - name: Save GQI FIB Files
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_QSDR_fib
          path: ./*.fib.gz          
      - name: QSDR Reconstruction
        run: |
          rm *.fib.gz
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }} --method=7      
      - name: Save QSDR FIB Files
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_GQI_fib
          path: ./*.fib.gz          

  quality_check2:
    name: SRC Quality Check
    needs: reconstruction
    runs-on: ubuntu-20.04
    steps:
      - name: SRC Files
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_src
      - name: Quality Check
        run: |        
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          mkdir src
          mv *.src.gz ./src
          ./dsi-studio/dsi_studio --action=qc --source=./src
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: qc.txt
          name: "${{ fromjson(needs.preprocessing.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}
      - name: Corrected SRC Files
        if: github.event.inputs.eddy == 'true' || github.event.inputs.acpc == 'true'
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: ${{ github.event.inputs.id }}_corrected_src
      - name: Quality Check
        run: |        
          mkdir corrected_src
          mv *.src.gz ./corrected_src
          ./dsi-studio/dsi_studio --action=qc --source=./corrected_src
          mv qc.txt corrected_qc.txt
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: corrected_qc.txt
          name: "${{ fromjson(needs.preprocessing.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}          
          
  database_construction:
    name: "Create Database"
    needs: reconstruction
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare FIB Files
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_QSDR_fib
      - name: Database Construction
        run: |        
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "participants.tsv" s3://openneuro.org/${{ github.event.inputs.id }} .
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          if [ -f participants.tsv ]; then
            ./dsi-studio/dsi_studio --action=atl --source=*.fib.gz --cmd=db --demo=participants.tsv --output=${{ github.event.inputs.id }}.db.fib.gz
          else
            ./dsi-studio/dsi_studio --action=atl --source=*.fib.gz --cmd=db --output=${{ github.event.inputs.id }}.db.fib.gz
          fi
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}.db.fib.gz
          name: "${{ github.event.inputs.id }}.db.fib.gz"
          tag: ${{ github.event.inputs.id }}          
     
