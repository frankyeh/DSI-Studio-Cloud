name: DSI Studio Cloud
on: 
  workflow_dispatch:
    inputs:
      id:
        description: 'OpenNeuro Accession Number'
        default: ds001743
        required: true
      eddy:
        type: boolean
        default: 'false'
        description: 'Preprocessing: TOPUP/EDDY'
      src_param:
        required: false
        default: ""
        description: 'Other Reconstruction Parameters'
      
jobs:    
  download_data:
    name: "NIFTI to SRC"
    runs-on: ubuntu-20.04
    outputs:
      files: ${{ steps.data.outputs.files }}
      dataset_description: ${{ steps.data.outputs.dataset_description }}
    steps:
      - name: Cache SRC Files
        id: cache-src
        uses: actions/cache@v3
        with:
          path: ./${{ github.event.inputs.id }}-src
          key: ${{ github.event.inputs.id }}-src 
      - name: Download OpenNeuro
        if: steps.cache-src.outputs.cache-hit != 'true'      
        run: |
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "*dwi.*" s3://openneuro.org/${{ github.event.inputs.id }} ${{ github.event.inputs.id }}
          curl -sL "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" | jar x && chmod 777 ./dsi-studio/dsi_studio
          ./dsi-studio/dsi_studio --action=src --source=./${{ github.event.inputs.id }}
          mkdir ${{ github.event.inputs.id }}-src
          mv ./**/*src.gz ${{ github.event.inputs.id }}-src
          ./dsi-studio/dsi_studio --action=qc --source=./${{ github.event.inputs.id }}-src
      - name: Create Release
        if: steps.cache-src.outputs.cache-hit != 'true'      
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: qc.txt
          name: "${{ fromjson(steps.download_data.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}     
      - name: Get Data Infomation
        id: data
        run: |
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "dataset_description.json" s3://openneuro.org/${{ github.event.inputs.id }} .
          content=`cat dataset_description.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=dataset_description::$content"  
          cd ${{ github.event.inputs.id }}-src
          SRC_LIST=$(ls *.src.gz | jq -R -s -c 'split("\n")[:-1]')
          echo ::set-output name=files::${SRC_LIST}            

  topup_eddy:
    name: TOPUP/EDDY
    continue-on-error: true
    needs: download_data
    outputs:
      dataset_description: ${{ needs.download_data.outputs.dataset_description }}    
    strategy:
      matrix:
        files: ${{ fromjson(needs.download_data.outputs.files) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check If Done
        run: wget https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}
      - name: Load SRC Files
        if: failure()  
        uses: actions/cache@v3
        with:
          path: ./${{ github.event.inputs.id }}-src
          key: ${{ github.event.inputs.id }}-src  
      - name: Cache FSL environment
        if: failure()
        id: cache-fsl
        uses: actions/cache@v3
        with:
          path: /opt/fsl
          key: ${{ runner.os }}-fsl
      - name: Prepare FSL environment
        if: steps.cache-fsl.outputs.cache-hit != 'true' && failure() 
        run: curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos7_64.tar.gz | tar zxv --no-same-owner -C /opt --exclude='fsl/doc' --exclude='fsl/refdoc' --exclude='fsl/python/oxford_asl' --exclude='fsl/data/possum' --exclude='fsl/data/first' --exclude='fsl/data/mist' --exclude='fsl/data/atlases' --exclude='fsl/data/xtract_data' --exclude='fsl/extras/doc' --exclude='fsl/extras/man' --exclude='fsl/extras/src' --exclude='fsl/src'
      - name: Eddy
        if: failure()
        run: |
          export OS="Linux"
          export FSLDIR="/opt/fsl"
          export FSL_DIR="$FSLDIR"
          export FSLOUTPUTTYPE="NIFTI_GZ"
          export FSLMULTIFILEQUIT="TRUE"
          export LD_LIBRARY_PATH="$FSLDIR/lib:$LD_LIBRARY_PATH"
          export FSLTCLSH="/usr/bin/tclsh"
          export FSLWISH="/usr/bin/wish"
          export PATH="$FSLDIR/bin:$PATH"
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          cp ./${{ github.event.inputs.id }}-src/${{ matrix.files }} .
          ./dsi-studio/dsi_studio --action=rec --source=${{ matrix.files }} --cmd="[Step T2][Corrections][EDDY]" --save_src=${{ matrix.files }} ${{ github.event.inputs.src_param}}              
      - name: Save SRC Files
        continue-on-error: true
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_corrected_src
          path: ${{ matrix.files }}  
      - name: Create Release
        if: failure()
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ matrix.files }} 
          name: "${{ fromjson(needs.download_data.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}  
          
  src_quality_check:
    name: SRC Quality Check
    needs: topup_eddy
    outputs:
      dataset_description: ${{ needs.topup_eddy.outputs.dataset_description }}    
    runs-on: ubuntu-20.04
    steps:
      - name: Load Corrected SRC Files   
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_corrected_src                   
      - name: Quality Check
        run: |        
          mkdir ${{ github.event.inputs.id }}-corrected_src
          mv *.src.gz ./${{ github.event.inputs.id }}-corrected_src
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=qc --source=./${{ github.event.inputs.id }}-corrected_src
          mv qc.txt corrected_qc.txt             
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: corrected_qc.txt 
          name: "${{ fromjson(needs.topup_eddy.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}          

  reconstruction:
    name: SRC to FIB
    continue-on-error: true
    needs: topup_eddy
    outputs:
      dataset_description: ${{ needs.topup_eddy.outputs.dataset_description }}    
    strategy:
      matrix:
        files: ${{ fromjson(needs.topup_eddy.outputs.files) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check If Done
        run: |
          wget https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}.gqi.fib.gz
          wget https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}.qsdr.fib.gz
      - name: GQI and QSDR Reconstruction
        if: failure()
        run: |
          wget https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          ./dsi-studio/dsi_studio --action=rec --source=./${{ github.event.inputs.id }}-corrected_src/${{ matrix.files }} --output=${{ matrix.files }}.gqi.fib.gz ${{ github.event.inputs.src_param}}  
          ./dsi-studio/dsi_studio --action=rec --source=./${{ github.event.inputs.id }}-corrected_src/${{ matrix.files }} --output=${{ matrix.files }}.qsdr.fib.gz --method=7  ${{ github.event.inputs.src_param}}    
          mv ./${{ github.event.inputs.id }}-corrected_src/*.fib.gz .
      - name: Create Release
        if: failure()
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: |
            ${{ matrix.files }}.gqi.fib.gz
            ${{ matrix.files }}.qsdr.fib.gz
          name: "${{ fromjson(needs.download_data.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}  
      - name: Save GQI FIB Files
        continue-on-error: true
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_GQI_fib
          path: ./${{ matrix.files }}.gqi.fib.gz              
      - name: QSDR Reconstruction
        continue-on-error: true
        run: |
          rm *.fib.gz
      - name: Save QSDR FIB Files
        continue-on-error: true
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.event.inputs.id }}_QSDR_fib
          path: ./${{ matrix.files }}.qsdr.fib.gz          
          
  database_construction:
    name: Create Database
    needs: reconstruction
    outputs:
      dataset_description: ${{ needs.topup_eddy.outputs.dataset_description }}    
    runs-on: ubuntu-20.04
    steps:
      - name: Check If Done
        run: |
          wget https://github.com/frankyeh/DSI-Studio-Cloud/releases/download/${{ github.event.inputs.id }}/${{ matrix.files }}.db.fib.gz
      - name: Prepare FIB Files
        if: failure()
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ github.event.inputs.id }}_QSDR_fib
      - name: Database Construction
        if: failure()
        run: |        
          aws s3 sync --no-sign-request --region eu-west-1 --exclude "*" --include "participants.tsv" s3://openneuro.org/${{ github.event.inputs.id }} .
          curl -sSLO "https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2004.zip" && unzip -q *.zip
          if [ -f participants.tsv ]; then
            ./dsi-studio/dsi_studio --action=atl --source=*.fib.gz --cmd=db --demo=participants.tsv --output=${{ github.event.inputs.id }}.db.fib.gz
          else
            ./dsi-studio/dsi_studio --action=atl --source=*.fib.gz --cmd=db --output=${{ github.event.inputs.id }}.db.fib.gz
          fi
      - name: Create Release
        if: failure()
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: ${{ github.event.inputs.id }}.db.fib.gz
          name: "${{ fromjson(needs.reconstruction.outputs.dataset_description).Name }}"
          tag: ${{ github.event.inputs.id }}          
     
